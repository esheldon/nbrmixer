#!/usr/bin/env python
from __future__ import print_function
try:
    xrange
except:
    xrange=range

import os
import nbrmixer
from nbrmixer import files
import nbrsim
import fitsio
import esutil as eu

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('run', help='processing run')
parser.add_argument('--match',
                    action='store_true',
                    help='match to truth and pull out shear info')

def add_file_index(data, i):
    add_dt=[('file_id','i4')]

    ndata = eu.numpy_util.add_fields(data, add_dt)
    ndata['file_id'] = i
    return ndata

def main():
    args=parser.parse_args()

    conf = files.read_config(args.run)
    nbrsim_conf = nbrsim.files.read_config(conf['nbrsim_run'])
    njobs=nbrsim_conf['output']['nfiles']

    collated_file = files.get_collated_file(args.run)
    collated_dir = files.get_collated_dir(args.run)
    if not os.path.exists(collated_dir):
        os.makedirs(collated_dir)

    first=True
    print("will write to:",collated_file)

    with fitsio.FITS(collated_file,'rw',clobber=True) as fits:
        for i in xrange(njobs):

            output_file = files.get_output_file(args.run, i)        

            print("%d/%d %s" % (i+1,njobs,output_file))

            if not os.path.exists(output_file):
                print("missing file:",output_file)
                continue

            try:
                odata = fitsio.read(output_file)

                if args.match:
                    # match to truth
                    mdata, nmatch = nbrmixer.util.match_truth(
                        odata, 
                        conf['nbrsim_run'],
                        i,
                    )
                    if mdata is None:
                        continue

                else:
                    # the truth file was already matched
                    mdata = nbrmixer.util.add_true_shear(
                        odata,
                        conf['nbrsim_run'],
                        i,
                    )

                data = add_file_index(mdata, i)

                if first:
                    first=False
                    fits.write(data)
                else:
                    fits[-1].append(data)
            except IOError as err:
                print("could not read file %s : %s" % (output_file, err))
            except ValueError as err:
                print("could process file %s : %s" % (output_file, err))

    print("output is in:",collated_file)
main()
